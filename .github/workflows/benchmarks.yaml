on: [push]

name: Postgres NDC component benchmarks

permissions:
  contents: write
  deployments: write

jobs:
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
      # We need this because ndc-hub and ndc-multitenant are private repositores
      # and we are using deploy keys to access them.
      - name: Add SSH keys
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.HASURA_CI_USER_BASE64_ENCODED_SSH_KEY }}" | base64 --decode > /home/runner/.ssh/hasura-ci
          chmod 600 /home/runner/.ssh/hasura-ci
          cat > /home/runner/.ssh/config <<EOF
          IdentityFile /home/runner/.ssh/hasura-ci
          EOF

      - name: Install Nix ‚ùÑ
        uses: DeterminateSystems/nix-installer-action@v4

      - name: Run the Magic Nix Cache üîå
        uses: DeterminateSystems/magic-nix-cache-action@v1

      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Build the Docker image üî®
        run: |
          docker load < $(nix build --no-link --print-out-paths '.#dockerDev')

      - name: Start services ‚ñ∂Ô∏è
        run: |
          cd benchmarks/component
          docker compose up --detach --wait agent

      - name: Run benchmarks üèÉ
        run: |
          cd benchmarks/component
          for benchmark in $(ls benchmarks); do
            echo "Running ${benchmark}..."
            docker compose run --rm benchmark run "/benchmarks/$benchmark"
          done

      - name: Extract summaries ‚õèÔ∏è
        run: |
          ./benchmarks/component/summarize.sh | tee benchmark-results.json

      # we run these benchmarks on every push as they service as
      # they are also our best multitenant tests atm
      # however we only store the results on `main`.
      - name: Store benchmark result ‚¨ÜÔ∏è
        if: github.ref == 'refs/heads/master'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Component benchmarks
          tool: customSmallerIsBetter
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 200%
          comment-on-alert: true

      # scream into Slack if something goes wrong
      - name: Report Status
        if: github.ref == 'refs/heads/master'
        uses: ravsamhq/notify-slack-action@v1
        with:
          status: ${{ job.status }}
          notify_when: failure
          notification_title: 'üòß Error on <{repo_url}|{repo}>'
          message_format: 'üê¥ *{workflow}* {status_message} for <{repo_url}|{repo}>'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.BROKEN_BUILD_SLACK_WEBHOOK_URL }}

